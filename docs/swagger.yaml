basePath: /api
definitions:
  dto.ErrorResponse:
    properties:
      error:
        type: string
      message:
        type: string
    type: object
  dto.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  dto.LoginResponse:
    properties:
      access_token:
        type: string
      expires_in:
        description: in seconds
        type: integer
      refresh_token:
        type: string
      token_type:
        type: string
      user:
        $ref: '#/definitions/dto.UserInfo'
    type: object
  dto.LogoutRequest:
    properties:
      refresh_token:
        type: string
    type: object
  dto.PasswordChangeRequest:
    properties:
      current_password:
        type: string
      new_password:
        minLength: 8
        type: string
    required:
    - current_password
    - new_password
    type: object
  dto.PasswordChangeResponse:
    properties:
      message:
        type: string
    type: object
  dto.PasswordResetConfirmRequest:
    properties:
      new_password:
        minLength: 8
        type: string
      token:
        type: string
    required:
    - new_password
    - token
    type: object
  dto.PasswordResetConfirmResponse:
    properties:
      message:
        type: string
    type: object
  dto.PasswordResetRequestRequest:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  dto.PasswordResetRequestResponse:
    properties:
      message:
        type: string
    type: object
  dto.RefreshTokenRequest:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  dto.RefreshTokenResponse:
    properties:
      access_token:
        type: string
      expires_in:
        description: in seconds
        type: integer
      token_type:
        type: string
    type: object
  dto.RegistrationRequest:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        minLength: 8
        type: string
    required:
    - email
    - name
    - password
    type: object
  dto.RegistrationResponse:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: string
      name:
        type: string
      role:
        type: string
    type: object
  dto.UserInfo:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: string
      last_login:
        type: string
      name:
        type: string
      role:
        type: string
    type: object
info:
  contact: {}
  description: API documentation for the Jalanrusak backend service.
  title: Jalanrusak API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login with email and password to receive access and refresh tokens.
      parameters:
      - description: Login payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Authenticate user credentials
      tags:
      - Auth
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Revoke the active session and optional refresh token.
      parameters:
      - description: Optional refresh token to revoke
        in: body
        name: request
        schema:
          $ref: '#/definitions/dto.LogoutRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Logout and revoke tokens
      tags:
      - Auth
  /auth/password/change:
    post:
      consumes:
      - application/json
      description: Change the authenticated user's password.
      parameters:
      - description: Change password payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.PasswordChangeRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.PasswordChangeResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Change password
      tags:
      - Password
  /auth/password/reset-confirm:
    post:
      consumes:
      - application/json
      description: Reset password using a valid reset token.
      parameters:
      - description: Password reset confirmation payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.PasswordResetConfirmRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.PasswordResetConfirmResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Confirm password reset
      tags:
      - Password
  /auth/password/reset-request:
    post:
      consumes:
      - application/json
      description: Initiate password reset flow for the given email address.
      parameters:
      - description: Password reset request payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.PasswordResetRequestRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.PasswordResetRequestResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Request password reset email
      tags:
      - Password
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Exchange a valid refresh token for a new access token.
      parameters:
      - description: Refresh token payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.RefreshTokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Refresh access token
      tags:
      - Auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Create a new user with name, email, and password.
      parameters:
      - description: Registration payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.RegistrationRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.RegistrationResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Register a new user
      tags:
      - Auth
schemes:
- http
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and the JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
