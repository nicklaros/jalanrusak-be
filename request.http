### JalanRusak Backend API - Sample Requests
### Update these variables after running requests
@baseUrl = http://localhost:8080
@accessToken = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiZmQzYzM3Y2QtNjRlYi00ZDkzLTk4NzItZTg0ZTk0N2M3MGYwIiwiZXhwIjoxNzYwMzcxMDA1LCJuYmYiOjE3NjAyODQ2MDUsImlhdCI6MTc2MDI4NDYwNX0.1kn9IVeLdPvKRb8yAJ-A0Z4G_krPomL7L6RlDC5UHJ0
@refreshToken = HybYz6rYCHFIt14FGtldJGHh980l160m2PGckP3i6jI=

###############################################################################
### 1. USER REGISTRATION
###############################################################################

### Register a new user
POST {{baseUrl}}/api/v1/auth/register
content-type: application/json

{
    "name": "nicklaros",
    "email": "nicklaros@gmail.com",
    "password": "Qwerty123456!"
}

### Register - Test duplicate email (should return 409 Conflict)
POST {{baseUrl}}/api/v1/auth/register
content-type: application/json

{
    "name": "Another User",
    "email": "nicklaros@gmail.com",
    "password": "AnotherP@ss123"
}

### Register - Test weak password (should return 400)
POST {{baseUrl}}/api/v1/auth/register
content-type: application/json

{
    "name": "Test User",
    "email": "test@example.com",
    "password": "weak"
}

###############################################################################
### 2. USER LOGIN
###############################################################################

### Login with valid credentials
POST {{baseUrl}}/api/v1/auth/login
content-type: application/json

{
    "email": "nicklaros@gmail.com",
    "password": "Qwerty123456!"
}

### Login - Invalid credentials (should return 401)
POST {{baseUrl}}/api/v1/auth/login
content-type: application/json

{
    "email": "nicklaros@gmail.com",
    "password": "WrongPassword123"
}

###############################################################################
### 3. TOKEN REFRESH
###############################################################################

### Refresh access token
POST {{baseUrl}}/api/v1/auth/refresh
content-type: application/json

{
    "refresh_token": "{{refreshToken}}"
}

### Refresh - Invalid token (should return 401)
POST {{baseUrl}}/api/v1/auth/refresh
content-type: application/json

{
    "refresh_token": "invalid_token_here"
}

###############################################################################
### 4. USER LOGOUT (Protected)
###############################################################################

### Logout (revoke specific refresh token)
POST {{baseUrl}}/api/v1/auth/logout
Authorization: Bearer {{accessToken}}
content-type: application/json

{
    "refresh_token": "{{refreshToken}}"
}

### Logout - Revoke all tokens (no refresh_token in body)
POST {{baseUrl}}/api/v1/auth/logout
Authorization: Bearer {{accessToken}}
content-type: application/json

{}

###############################################################################
### 5. PASSWORD RESET REQUEST
###############################################################################

### Request password reset (check console for token!)
POST {{baseUrl}}/api/v1/auth/password/reset-request
content-type: application/json

{
    "email": "nicklaros@gmail.com"
}

### Request reset - Non-existent email (still returns success for security)
POST {{baseUrl}}/api/v1/auth/password/reset-request
content-type: application/json

{
    "email": "nonexistent@example.com"
}

###############################################################################
### 6. PASSWORD RESET CONFIRM
###############################################################################

### Reset password using token from console
# IMPORTANT: Copy the token from server console output after requesting reset
POST {{baseUrl}}/api/v1/auth/password/reset-confirm
content-type: application/json

{
    "token": "hv2_-MkqAnMqg4mZKThToYj8Um-mEqvdLC0rC7he46M=",
    "new_password": "NewP@ssword456"
}

### Reset - Invalid token (should return 400)
POST {{baseUrl}}/api/v1/auth/password/reset-confirm
content-type: application/json

{
    "token": "invalid_token",
    "new_password": "NewP@ssword456"
}

### Reset - Weak password (should return 400)
POST {{baseUrl}}/api/v1/auth/password/reset-confirm
content-type: application/json

{
    "token": "valid_token_here",
    "new_password": "weak"
}

###############################################################################
### 7. PASSWORD CHANGE (Protected - Requires Authentication)
###############################################################################

### Change password (authenticated user)
POST {{baseUrl}}/api/v1/auth/password/change
Authorization: Bearer {{accessToken}}
content-type: application/json

{
    "current_password": "NewP@ssword456",
    "new_password": "Qwerty123456!"
}

### Change - Wrong current password (should return 401)
POST {{baseUrl}}/api/v1/auth/password/change
Authorization: Bearer {{accessToken}}
content-type: application/json

{
    "current_password": "WrongPassword",
    "new_password": "NewSecureP@ss789"
}

### Change - Weak new password (should return 400)
POST {{baseUrl}}/api/v1/auth/password/change
Authorization: Bearer {{accessToken}}
content-type: application/json

{
    "current_password": "Qwerty123456!",
    "new_password": "weak"
}

###############################################################################
### COMPLETE WORKFLOW EXAMPLE
###############################################################################

### Step 1: Register new test user
POST {{baseUrl}}/api/v1/auth/register
content-type: application/json

{
    "name": "Workflow Test",
    "email": "workflow@example.com",
    "password": "Initial@Pass123"
}

###

### Step 2: Login to get tokens
POST {{baseUrl}}/api/v1/auth/login
content-type: application/json

{
    "email": "workflow@example.com",
    "password": "Initial@Pass123"
}

# Copy access_token and refresh_token from response above

###

### Step 3: Change password (update Authorization header with your token)
POST {{baseUrl}}/api/v1/auth/password/change
Authorization: Bearer your_access_token_from_step2
content-type: application/json

{
    "current_password": "Initial@Pass123",
    "new_password": "Changed@Pass456"
}

###

### Step 4: Refresh token
POST {{baseUrl}}/api/v1/auth/refresh
content-type: application/json

{
    "refresh_token": "your_refresh_token_from_step2"
}

###

### Step 5: Logout
POST {{baseUrl}}/api/v1/auth/logout
Authorization: Bearer your_access_token
content-type: application/json

{
    "refresh_token": "your_refresh_token_from_step2"
}

###

### Step 6: Try refresh after logout (should fail with 401)
POST {{baseUrl}}/api/v1/auth/refresh
content-type: application/json

{
    "refresh_token": "your_refresh_token_from_step2"
}

###############################################################################
### PASSWORD RESET WORKFLOW
###############################################################################

### Step 1: Request password reset
POST {{baseUrl}}/api/v1/auth/password/reset-request
content-type: application/json

{
    "email": "workflow@example.com"
}

###

### Step 2: Check server console for reset token
# Look for output like: "Reset Token: xxxxxxxxxx"

###

### Step 3: Use reset token to set new password
POST {{baseUrl}}/api/v1/auth/password/reset-confirm
content-type: application/json

{
    "token": "paste_token_from_console",
    "new_password": "ResetP@ssword789"
}

###

### Step 4: Login with new password
POST {{baseUrl}}/api/v1/auth/login
content-type: application/json

{
    "email": "workflow@example.com",
    "password": "ResetP@ssword789"
}

###############################################################################
### NOTES AND TIPS
###############################################################################

# 1. Server must be running: ./bin/server

# 2. Password requirements:
#    - Minimum 8 characters
#    - At least 1 uppercase letter
#    - At least 1 lowercase letter  
#    - At least 1 digit

# 3. Token lifetimes:
#    - Access token: 24 hours
#    - Refresh token: 30 days
#    - Password reset token: 1 hour

# 4. Expected status codes:
#    200 - Success (login, refresh, logout, password ops)
#    201 - Created (registration)
#    400 - Validation error
#    401 - Unauthorized
#    404 - Not found
#    409 - Conflict (duplicate email)
#    500 - Server error

# 5. For password reset:
#    - Email is sent to console in development mode
#    - Check server terminal output for reset token
#    - Production will use SMTP email service

# 6. Protected endpoints require:
#    Authorization: Bearer <access_token>

###