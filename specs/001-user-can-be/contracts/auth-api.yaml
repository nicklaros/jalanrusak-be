openapi: 3.0.3
info:
  title: JalanRusak Authentication API
  description: |
    Authentication endpoints for the JalanRusak backend service.
    Supports user registration, login, token refresh, logout, and password reset.
  version: 1.0.0
  contact:
    name: JalanRusak Team

servers:
  - url: http://localhost:8080/api/v1
    description: Development server
  - url: https://api.jalanrusak.id/api/v1
    description: Production server

tags:
  - name: Authentication
    description: User authentication and session management
  - name: Password
    description: Password management and reset
  - name: User
    description: User profile management

paths:
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      description: Create a new user account with email and password
      operationId: register
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
            examples:
              validRegistration:
                summary: Valid registration
                value:
                  name: "John Doe"
                  email: "john.doe@example.com"
                  password: "SecureP@ss123"
      responses:
        '201':
          description: User successfully registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Invalid input or email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                emailExists:
                  summary: Email already registered
                  value:
                    error: "Email already registered"
                weakPassword:
                  summary: Weak password
                  value:
                    error: "Password does not meet requirements"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticate user with email and password, returns access and refresh tokens
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
            examples:
              validLogin:
                summary: Valid login
                value:
                  email: "john.doe@example.com"
                  password: "SecureP@ss123"
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalidCredentials:
                  summary: Invalid email or password
                  value:
                    error: "Invalid credentials"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh access token
      description: Get a new access token using a valid refresh token
      operationId: refreshToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshRequest'
            examples:
              validRefresh:
                summary: Valid refresh token
                value:
                  refreshToken: "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Invalid or expired refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                tokenExpired:
                  summary: Token expired
                  value:
                    error: "Token expired"
                    code: "TOKEN_EXPIRED"
                tokenRevoked:
                  summary: Token revoked
                  value:
                    error: "Token has been revoked"
                    code: "TOKEN_REVOKED"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/logout:
    post:
      tags:
        - Authentication
      summary: Logout user
      description: Revoke all refresh tokens for the authenticated user
      operationId: logout
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: Unauthorized - invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/password-reset/request:
    post:
      tags:
        - Password
      summary: Request password reset
      description: Send password reset email to user
      operationId: requestPasswordReset
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetRequest'
            examples:
              validRequest:
                summary: Valid email
                value:
                  email: "john.doe@example.com"
      responses:
        '200':
          description: Reset email sent (always returns 200 even if email doesn't exist, for security)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/password-reset/confirm:
    post:
      tags:
        - Password
      summary: Confirm password reset
      description: Reset password using token from email
      operationId: confirmPasswordReset
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
            examples:
              validReset:
                summary: Valid password reset
                value:
                  token: "reset-token-from-email"
                  newPassword: "NewSecureP@ss456"
      responses:
        '200':
          description: Password reset successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid token or weak password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                tokenExpired:
                  summary: Token expired
                  value:
                    error: "Reset token has expired"
                tokenUsed:
                  summary: Token already used
                  value:
                    error: "Reset token has already been used"
                weakPassword:
                  summary: Weak password
                  value:
                    error: "Password does not meet requirements"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/profile:
    get:
      tags:
        - User
      summary: Get user profile
      description: Retrieve authenticated user's profile information
      operationId: getProfile
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User profile retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '401':
          description: Unauthorized - invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT access token obtained from login or refresh endpoint

  schemas:
    RegisterRequest:
      type: object
      required:
        - name
        - email
        - password
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 255
          example: "John Doe"
        email:
          type: string
          format: email
          maxLength: 255
          example: "john.doe@example.com"
        password:
          type: string
          minLength: 8
          maxLength: 255
          description: Must contain at least 1 uppercase, 1 lowercase, and 1 number
          example: "SecureP@ss123"

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        password:
          type: string
          example: "SecureP@ss123"

    RefreshRequest:
      type: object
      required:
        - refreshToken
      properties:
        refreshToken:
          type: string
          format: uuid
          example: "a1b2c3d4-e5f6-7890-abcd-ef1234567890"

    PasswordResetRequest:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email
          example: "john.doe@example.com"

    PasswordResetConfirm:
      type: object
      required:
        - token
        - newPassword
      properties:
        token:
          type: string
          example: "reset-token-from-email"
        newPassword:
          type: string
          minLength: 8
          maxLength: 255
          description: Must contain at least 1 uppercase, 1 lowercase, and 1 number
          example: "NewSecureP@ss456"

    AuthResponse:
      type: object
      properties:
        accessToken:
          type: string
          description: JWT access token (24 hour expiry)
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        refreshToken:
          type: string
          format: uuid
          description: Refresh token (30 day expiry)
          example: "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
        tokenType:
          type: string
          example: "Bearer"
        expiresIn:
          type: integer
          description: Access token expiry in seconds
          example: 86400
        user:
          $ref: '#/components/schemas/UserProfile'

    UserProfile:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        name:
          type: string
          example: "John Doe"
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        role:
          type: string
          enum: [user, verificator]
          example: "user"
        createdAt:
          type: string
          format: date-time
          example: "2025-10-12T10:30:00Z"
        lastLoginAt:
          type: string
          format: date-time
          nullable: true
          example: "2025-10-12T14:45:00Z"

    SuccessResponse:
      type: object
      properties:
        message:
          type: string
          example: "Operation successful"

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          example: "Invalid credentials"
        code:
          type: string
          example: "AUTH_FAILED"
          description: Optional error code for client-side handling
        details:
          type: object
          additionalProperties: true
          description: Optional additional error details

security: []
